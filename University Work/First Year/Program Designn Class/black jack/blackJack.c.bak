
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>


//main function
int main()
{

	int deck[2][4][13];
	int x, suit, card, bet, totalMoney, hands, decks, i;
	int *userHand, *dealerHand;
	char *userSuit, *dealerSuit;
	char suitChar, cardChar;
	int userHandSize = 2;
	int dealerHandSize = 2;
	int userTotal = 0, dealerTotal = 0, dealerFaceup;
	time_t t;
	char mode;
	bool loop;

	//declaring functions
	void draw(int[2][4][13],	 int, int, int);

	//seeds rand
	//srand((unsigned) time(&t));
	srand(time(0));

	//allocates memory for dealer and user hands
	userHand = calloc(userHandSize, sizeof(int));
	dealerHand = calloc(dealerHandSize, sizeof(int));

	//fills out deck
	for(int i = 0;i < 4;i++)
	{

		//inner loop
		for(int j = 0;j < 13;j++)
		{

			//this fills each row with nthe numbers 1 to 13
			deck[0][i][j] = j+1;

		} //end for

	} //end for

	//asks the user what mode they wish to play in
	printf("What mode do you wish to play the game in?\nA automated player\nT test\n\n");
	scanf("%1s", &mode);

	//gets bet amount, total money available and hands to be played
	printf("How much money do you wish for your player to have?, How much will this player bet on each game?, how many hands should they 	play? and how many decks should the dealer have?\n");
	scanf("%d %d %d %d", &bet, &totalMoney, &hands, &decks);

	//main game loop
	do
	{

		//prints out your total amount of money if the user is not in test mode
		if(mode == 'A' || mode == 'a')
		{

			printf("The current balance is %d\n", totalMoney);

		} //end if 


		//this gives the user and dealer there first 2 cards
		for(i = 0 ; i < 2 ; i++)
		{

			if(mode =='A' || mode == 'a')
			{

				printf("A card is delt to the player\n");
				printf("A card is delt to the dealer\n");

			} //end if

			//this gets a card
			card = draw(deck, &decks, &suit, &card);

			userTotal = userTotal + card+ 1;

			*(dealerHand+i) = cardChar;

		} //end for


		//this is where the cards are delt
		while(userTotal < 21 && loop == true)
		{

			card = draw(deck, &decks, &suit, &card);

		} //end while loop


	} //end do while
	while(hands > 0);

	return 0;
} //end main


//function to draw a card
void draw(int deck[][4][13], int *decksPtr, int *suitPtr, int *cardPtr)
{

	int loop = false;

	do
	{

		*suitPtr = rand() %4;
		*cardPtr = rand() %13;

		if(*(deck[1][*suitPtr][*cardPtr]) == *decksPtr)
		{

			loop = true;

		} //end if
		else
		{

			*(deckPtr[1][*suitPtr][*cardPtr]) = *(deckPtr[1][*suitPtr][*cardPtr]) + 1;
			loop = false;

		} //end else

	} //end do while loop
	while(loop == true);

	//this sets card to equal the contents in the array
	*cardPtr = *(deckPtr[0][*suitPtr][*cardPtr]);

} //end draw function

//function to sort the cards out
char suitSort(suit)
{

	//this turns the number generated by the draw function in to a character for the suit
	switch(suit)
	{

		case 0:
		{

			suitChar = 'h';
			break;

		} //end case 0

		case 1:
		{

			suitChar = 'd';
			break;

		} //end case 1

		case 2:
		{

			suitChar = 's';
			break;

		} //end case 2

		case 3
		{

			suitChar = 'c';
			break;

		} //end case 3

	} //end suit switch

	return suitChar;

} //end suit sort function
